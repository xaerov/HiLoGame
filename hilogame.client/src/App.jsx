import React, { useState, useEffect } from "react";
import axios from "axios";
import { HubConnectionBuilder } from "@microsoft/signalr";
import PlayerNameInput from "./components/PlayerNameInput";
import GameOptions from "./components/GameOptions";
import GuessInput from "./components/GuessInput";
import MessageDisplay from "./components/MessageDisplay";

function App() {
    const [playerName, setPlayerName] = useState(""); // Player's name
    const [gameId, setGameId] = useState(null); // Current game id
    const [message, setMessage] = useState(""); // Message to display
    const [isGameStarted, setIsGameStarted] = useState(false); // Track if the game started
    const [isNameEntered, setIsNameEntered] = useState(false); // Track if player has entered their name
    const [isGameSelected, setIsGameSelected] = useState(false); // Track if player has selected game
    const [isPlayersTurn, setIsPlayersTurn] = useState(false); // Track which player's turn it is

    useEffect(() => {
        if (gameId) {
            const connection = new HubConnectionBuilder()
                .withUrl("/api/gameHub")
                .withAutomaticReconnect()
                .build();

            connection.start().then(() => {

                connection.on("NewTurn", (message) => {
                    if (isGameStarted === false) {
                        setIsGameStarted(true);
                    }
                    setIsPlayersTurn(playerName === message);
                    setMessage("Now, it is the "+message+"`s turn");
                });

                connection.on("EndGame", (message) => {
                    setIsGameStarted(false);
                    setMessage("The game is ended. The winner is " + message);
                });

                connection.invoke("JoinGameGroup", gameId).catch(function (err) {
                    return console.error(err.toString());
                });


            });

            return () => {
                connection.stop();
            };
        }
    }, [gameId]);

    // Create a new game
    const createGame = async () => {
        const response = await axios.post("/api/game/create", { playerName, min: 1, max: 5 });
        setGameId(response.data.id);
        setIsGameSelected(true); // Show game selected form after creating the game
        setMessage("Game created. Waiting for another player to join. Please send him the following GameId: " + response.data.id);
    };

    // Join an existing game by providing the gameId
    const joinGame = async (joinGameId) => {
        try {
            const response = await axios.post("/api/game/join", { gameId: joinGameId, playerName });
            setGameId(response.data.id);
            setIsGameStarted(true);
            setIsGameSelected(true);
            setIsPlayersTurn(response.data.currentPlayerName === response.data.Player2Name);
            setMessage("Now, it is the " + response.data.currentPlayerName + "`s turn");
        }
        catch (err) {
            alert('Cannot join the game: ' + joinGameId + " Error:" + err);
        }
      
    };



    return (
        <div>
            <h2>Welcome to the HiLo Game</h2>
            <h3>Game rules:</h3>
            <p>
                The game is played by 2 players in different browser windows or browsers.<br/>
                A random number is generated by the system within a predefined range (1 to 5).<br />
                Players take turns guessing the number.<br />
                The system provides feedback after each guess:<br />
                "Hi" if the guess is greater than the target number.<br />
                "Lo" if the guess is less than the target number.<br />
                The first player who guesses the number wins.<br />
            </p>


            {/* Stage 1: Player name input */}
            {!isNameEntered && (
                <PlayerNameInput
                    playerName={playerName}
                    setPlayerName={setPlayerName}
                    setIsNameEntered={setIsNameEntered}
                />
            )}

            {/* Stage 2: Game create/join options */}
            {isNameEntered && !isGameSelected && (
                <GameOptions
                    playerName={playerName}
                    createGame={createGame}
                    joinGame={joinGame}
                    setMessage={setMessage}
                />
            )}

            {/* Stage 3: Guess input form */}
            {isGameSelected && gameId && isGameStarted && (
                <GuessInput
                    gameId={gameId}
                    playerName={playerName}
                    isGameStarted={isGameStarted}
                    isPlayersTurn = {isPlayersTurn}
                />
            )}

            {/* Message Display */}
            <MessageDisplay message={message} />
        </div>
    );
}

export default App;
